generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String             @id @default(uuid()) @db.Uuid
  name           String?
  email          String?            @unique
  emailVerified  DateTime?          @map("email_verified")
  password       String?            @map("password")
  image          String?

  // relations
  reports        Report[]           @relation("UserReports")
  attachments    ReportAttachment[] @relation("UserAttachments")
  handledReports Report[]           @relation("HandledReports")

  @@map("users")
}

model WordsPreference {
  id            String        @id @default(uuid()) @db.Uuid
  userId        String        @unique @db.Uuid
  levels        Level[]       @default([A1])
  wordsLanguage WordsLanguage @default(en)
  delayTime     Int           @default(2)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Report {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String?  @db.Uuid
  user          User?    @relation("UserReports", fields: [userId], references: [id], onDelete: Cascade)

  subject       String
  message       String   @db.Text
  contactEmail  String?
  ip            String?
  userAgent     String?

  problemType   ProblemType

  status        ReportStatus   @default(OPEN)
  priority      ReportPriority @default(MEDIUM)

  createdAt     DateTime  @default(now())
  handledAt     DateTime?
  handledById   String?   @db.Uuid
  handledBy     User?     @relation("HandledReports", fields: [handledById], references: [id], onDelete: SetNull)

  adminNote     String?   @db.Text
  emailSent     Boolean   @default(false)

  attachments   ReportAttachment[] @relation("ReportAttachments")

  @@index([userId])
  @@index([ip])
  @@index([status])
  @@index([problemType])
  @@map("reports")
}

model ReportAttachment {
  id        String   @id @default(uuid()) @db.Uuid

  reportId  String   @db.Uuid
  report    Report   @relation("ReportAttachments", fields: [reportId], references: [id], onDelete: Cascade)

  filename  String
  url       String
  mimeType  String?
  size      Int?
  createdAt DateTime @default(now())

  userId    String?  @db.Uuid
  user      User?    @relation("UserAttachments", fields: [userId], references: [id])

  @@index([reportId])
  @@map("report_attachments")
}

enum ProblemType {
  SPELLING
  PRONUNCIATION
  BAD_WORD
  UI_UX
  SERVER
  OTHER
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  DISMISSED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Level {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum WordsLanguage {
  en
  de
}
