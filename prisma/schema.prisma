generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id             String             @id @db.Uuid
  name           String?
  image          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  attachments    ReportAttachment[] @relation("UserAttachments")
  handledReports Report[]           @relation("HandledReports")
  reports        Report[]           @relation("UserReports")

  @@map("profiles")
}

model WordsPreference {
  id            String        @id @default(uuid()) @db.Uuid
  userId        String        @unique @db.Uuid
  levels        Level[]       @default([A1])
  wordsLanguage WordsLanguage @default(en)
  delayTime     Int           @default(2)

  @@index([userId])
  @@map("words_preferences")
}

model Report {
  id           String             @id @default(uuid()) @db.Uuid
  userId       String?            @db.Uuid
  subject      String
  message      String
  contactEmail String?
  ip           String?
  userAgent    String?
  problemType  ProblemType
  status       ReportStatus       @default(OPEN)
  priority     ReportPriority     @default(MEDIUM)
  createdAt    DateTime           @default(now())
  handledAt    DateTime?
  handledById  String?            @db.Uuid
  adminNote    String?
  emailSent    Boolean            @default(false)
  attachments  ReportAttachment[] @relation("ReportAttachments")
  handledBy    Profile?           @relation("HandledReports", fields: [handledById], references: [id])
  user         Profile?           @relation("UserReports", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ip])
  @@index([status])
  @@index([problemType])
  @@map("reports")
}

model ReportAttachment {
  id        String   @id @default(uuid()) @db.Uuid
  reportId  String   @db.Uuid
  filename  String
  url       String
  mimeType  String?
  size      Int?
  createdAt DateTime @default(now())
  userId    String?  @db.Uuid
  report    Report   @relation("ReportAttachments", fields: [reportId], references: [id], onDelete: Cascade)
  user      Profile? @relation("UserAttachments", fields: [userId], references: [id])

  @@index([reportId])
  @@map("report_attachments")
}

enum ProblemType {
  SPELLING
  PRONUNCIATION
  BAD_WORD
  UI_UX
  SERVER
  OTHER
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  DISMISSED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Level {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum WordsLanguage {
  en
  de
}
